# Задание 1
# Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента.
# Использовать функцию type() для проверки типа.
# Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.

list1 = [4, 7.5, 'Hello', False, None]


def type1(el):
    for el in range(len(list1)):
        print(type(list1[el]))
    return


type1(list1)

# Задание 2
# Для списка реализовать обмен значений соседних элементов.
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д.
# При нечётном количестве элементов последний сохранить на своём месте.
# Для заполнения списка элементов нужно использовать функцию input().

swap = int(input("Введите количество элементов списка: "))
list2 = []
x = 0
el = 0
while x < swap:
    list2.append(input("Введите значение списка: "))
    x += 1
for x in range(int(len(list2) / 2)):
    list2[el], list2[el + 1] = list2[el + 1], list2[el]
    el += 2
print(list2)

# Задание 3
# Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить, к какому времени года относится месяц (зима, весна, лето, осень).
# Напишите решения через list и dict.

season_list = ['winter', 'spring', 'summer', 'autumn']
season_dict = {1: 'Winter', 2: 'Spring', 3: 'Summer', 4: 'Autumn'}
month = int(input("Введите номер месяца: "))
if month == 1 or month == 12 or month == 2:
    print(season_dict.get(1))
elif month == 3 or month == 4 or month == 5:
    print(season_list[1])
elif month == 6 or month == 7 or month == 8:
    print(season_dict.get(3))
elif month == 9 or month == 10 or month == 11:
    print(season_list[3])
else:
    print("В году 12 месяцев")

# Задание 4
# Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки.
# Строки нужно пронумеровать.
# Если слово длинное, выводить только первые 10 букв в слове.

str1 = input("Введите строку из слов через пробелы:  ")
words = []
num = 1
for el in range(str1.count(' ') + 1):
    words = str1.split()
    if len(str(words)) <= 10:
        print(f" {num} {words[el]}")
        num += 1
    else:
        print(f" {num} {words[el][0:10]}")
        num += 1

# Задание 5
# Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает.
# У пользователя нужно запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].

list3 = [7, 5, 3, 3, 2]
nums = int(input('Введите натуральное число в рейтинг: '))
i = 0
for n in list3:
    if nums <= n:
        i += 1
    else:
        break
list3.insert(i, nums)
print(list3)

# Задание 6
# *Реализовать структуру данных «Товары».
# Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и словарь с параметрами, то есть характеристиками товара: название, цена, количество, единица измерения.
# Структуру нужно сформировать программно, запросив все данные у пользователя.

product = []
chars = {'Название': '', 'Цена': '', 'Количество': ''}
analysis = {'Название': [], 'Цена': [], 'Количество': []}
number = 0
while True:
    if input('Для выхода нажмите Q, для продолжения - Enter: ').upper() == 'Q':
        break
    number +=1
    chars = chars.copy()
    for f in chars:
        pro = input(f'Введите свойство "{f}": ')
        chars[f] = int(pro) if f == 'Цена' or f == 'Количество' else pro
        analysis[f].append(chars[f])
    product.append((number, chars))
    print(f'\nТовары\n{product}')
    print(f'\nАналитика товаров: \n {"*" * 50}')
    for key, value in analysis.items():
        print(f'{key:>30}: {value}')
    print('*' * 50)

